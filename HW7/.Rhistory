#takes an string based address and returns a lat and long
geocode<-function(address){
root<-"http://maps.google.com/maps/api/geocode"
google.url<-paste(root,"json?address=",address,"&sensor=false",sep="")
url<-URLencode(google.url)
apiResult<-getURL(url)
geoStruct<- fromJSON(apiResult, simplify=FALSE)
lat<-NA
lng<-NA
try(lat<-geoStruct$results[[1]]$geometry$location$lat)
try(lng<-geoStruct$results[[1]]$geometry$location$lng)
return(c(lat,lng))
}
#Temporary Code to test geo url as shown
MakeGeoURL<-function(address){
root<-"http://maps.google.com/maps/api/geocode/"
url<-paste(root,"json?address=",address,"&sensor=false",sep="")
return(URLencode(url))
}
#Packadges required for the code to function
EnsurePackage("ggplot2")
EnsurePackage("mapproj")
EnsurePackage("RJSONIO")
EnsurePackage("RCurl")
#-------------------------------#
#End Local Functions and Imports#
#-------------------------------#
##7.4 STart
#
#creates a dataframe from default dataset state, saved as strings
dummyDF <- data.frame(state.name, stringsAsFactors=FALSE)
#turns these values into all lowercase
dummyDF$state<-tolower(dummyDF$state)
#creates mapdata for US called state
us<-map_data("state")
#creates a simple ggplot map based of of the states with map id state
map.simple<-ggplot(dummyDF, aes(map_id = state))
#defines the map graphic as the states, fills it white and borders states with black
map.simple<- map.simple + geom_map(map = us, fill="white", color="black")
#deploys the map with us based lat and long values
map.simple<- map.simple + expand_limits(x=us$long, y=us$lat)
#constrains the praportions of the map and adds a title
map.simple<- map.simple + ggtitle("basic map of USA") + coord_map()
#print the map
map.simple
#--------------------
#Adding Points-------
#--------------------
map.simple+geom_point(aes(x=-100, y=30))
#--------------------
#Creating Pop Maps---
#--------------------
#create a dataframe filled with census data
dfStates <- readCensus()
#this does not work as presented
dfStates$statename<-tolower(dfStates$statename) #dr saltz has dfStates#state<-tolower(dfStates$region)
#create a ggplot map
map.popColor<-ggplot(dfStates,aes(map_id=statename)) #dr saltz has map_id=state
#fill by july11pop data
map.popColor<-map.popColor + geom_map(map=us, aes(fill=july11pop))
#grow map to the US lat long
map.popColor<-map.popColor + expand_limits(x=us$long, y=us$lat)
#constrain map to the US shape and title it STate Population
map.popColor<-map.popColor+coord_map()+ggtitle("state population")
map.popColor
#Codes to pull a link for the white house lat lng
MakeGeoURL("1600 Pennsylvania Avenue, Washington, DC")
#
#code to pull a latlng for the university.
latlon<-geocode("syracuse university, syracuse, ny")
#
g<-map.popColor+geom_point(aes(x=latlon$lon, y=latlon$lat), color="darkred", size=3)
g.2<-g+ xlim(-85,70) + ylim(35,45) + coord_map()
##7.5 Start
#
#Create four vectors filled with equal data
cities<-c("Manhattan, NY", "Boston, MA", "Philadelphia, PA", "Tampa, FL", "Chicago, IL", "Boise, ID", "San Francisco, CA", "Seattle, WA", "Huston, TX")
bus<-c(10,7,6,5,7,3,10,7,5)
weather<-c(5,3,6,7,3,6,10,7,2)
living<-c(7,6,6,7,5,4,6,8,2)
#Creat a dataframe and add lat lon data
city.df<-data.frame(cities,bus,weather,living)
city.df$geoCode<-geocode(cities)
#add this information to the map.simple map from 7.4
map.simple + geom_point(data=city.df, aes(x=geoCode$lon, y=geoCode$lat))
#color these by the weather
map.simple + geom_point(data=city.df, aes(x=geoCode$lon, y=geoCode$lat, size=bus, color=weather))
#7.6 Start
#
EnsurePackage("ggplot2")
EnsurePackage("ggmap")
##################Common Functions##########################
#
#Downloads and Activates R Packadges
EnsurePackage<-function(x){
x<-as.character(x)
if (!require(x,character.only=TRUE)){
install.packages(pkgs=x, repos="http://cran.r-project.org")
require(x, character.only=TRUE)
}
}
#
#Removes Commas and White Space from Strings returns a Int
Numberize <- function(inputVector)
{
inputVector <- gsub(",", "", inputVector)
inputVector <- gsub(" ", "", inputVector)
return(inputVector)
}
###############Functions for Chapter 7#######################
#
#Reads US Census returns cleaned data frame
readCensus<-function(){
urlToRead<-"http://www2.census.gov/programs-surveys/popest/tables/2010-2011/state/totals/nst-est2011-01.csv"
tempFrame<-data.frame(read.csv(urlToRead))
tempFrame<-tempFrame[-1:-8,1:5]
tempFrame<-tempFrame[-52:-58,]
colnames(tempFrame)<-c("statename", "april10census","april10base", "july10pop", "july11pop")
row.names(tempFrame)<- NULL
tempFrame$statename<-gsub("\\.","",tempFrame$statename)
tempFrame$april10census<-Numberize(tempFrame$april10census)
tempFrame$april10base<-Numberize(tempFrame$april10base)
tempFrame$july10pop<-Numberize(tempFrame$july10pop)
tempFrame$july11pop<-Numberize(tempFrame$july11pop)
return(tempFrame)
}
#
#takes an string based address and returns a lat and long
geocode<-function(address){
root<-"http://maps.google.com/maps/api/geocode"
google.url<-paste(root,"json?address=",address,"&sensor=false",sep="")
url<-URLencode(google.url)
apiResult<-getURL(url)
geoStruct<- fromJSON(apiResult, simplify=FALSE)
lat<-NA
lng<-NA
try(lat<-geoStruct$results[[1]]$geometry$location$lat)
try(lng<-geoStruct$results[[1]]$geometry$location$lng)
return(c(lat,lng))
}
#
#############################################################################
#############################Problems Solved#################################
#############################################################################
#
#
#Step 1: Load the data
#We will use the air quality data set, which you should already have as part of your R installation.
local.airquality<-airquality
local.airquality
na.numeric<-function(vector){
vector.length<-length(vector)
count<-NULL
while (count != vector.length){
if (vector[count] = NA){
vector[count]<-mean(vector)
count<-count+1
}else{
vector[count]<-vector[count]
count<-count+1
}
}
}
na.numeric<-function(vector){
vector.length<-length(vector)
count<-NULL
while (count != vector.length){
if (vector[count] = NA){
vector[count]<-mean(vector)
count<-count+1}
else{
vector[count]<-vector[count]
count<-count+1}
}
}
na.numeric<-function(vector){
vector.length<-length(vector)
count<-NULL
while (count != vector.length){
if (vector[count] = NA){
vector[count]<-mean(vector)
count<-count+1}
else{
vector[count]<-vector[count]
count<-count+1}
}
}
na.numeric<-function(vector){
vector.length<-length(vector)
count<-0
while (count != vector.length){
if (vector[count] = NA){
vector[count]<-mean(vector)
count<-count+1}
else{
vector[count]<-vector[count]
count<-count+1}
}
}
na.numeric<-function(vector){
vector.length<-length(vector)
count<-0
while (count != vector.length){
if (vector[count] = NA){
vector[count]<-mean(vector)
count<-count+1}
else{
vector[count]<-vector[count]
count<-count+1}
}
}
na.numeric<-function(vector){
vector.length<-length(vector)
count<-0
while (count != vector.length){
if (vector[count]=NA){
vector[count]<-mean(vector)
count<-count+1
}else{
vector[count]<-vector[count]
count<-count+1
}
}
}
View(vector)
na.numeric<-function(vector){
vector.length<-length(vector)
place<-0
while (place != vector.length){
if (vector[place]=NA){
vector[place]<-mean(vector)
place<-place+1
}else{
vector[place]<-vector[place]
place<-place+1
}
}
}
na.numeric<-function(vector){
for(i in vector){
vector[i]<-mean(vector)
}
return(vector)
}
#
#############################################################################
#############################Problems Solved#################################
#############################################################################
#
#
#Step 1: Load the data
#We will use the air quality data set, which you should already have as part of your R installation.
#
local.airquality<-airquality
#
#Step 2: Clean the data
#After you load the data, there will be some NAs in the data. You need to figure out what to do
#about those nasty NAs.
#
local.airquality$Ozone
print(na.numeric(local.airquality$Ozone))
#
#Step 2: Clean the data
#After you load the data, there will be some NAs in the data. You need to figure out what to do
#about those nasty NAs.
#
local.airquality$Ozone
#
#############################################################################
#############################Problems Solved#################################
#############################################################################
#
#
#Step 1: Load the data
#We will use the air quality data set, which you should already have as part of your R installation.
#
local.airquality<-airquality
#
#Step 2: Clean the data
#After you load the data, there will be some NAs in the data. You need to figure out what to do
#about those nasty NAs.
#
local.airquality$Ozone
local.airquality$Ozone(1)
local.airquality$Ozone[1]
local.airquality$Ozone[5]
local.airquality$Ozone[5]<-mean(local.airquality$Ozone)
local.airquality$Ozone[5]
mean
arg(mean)
mean?
mean()?
mean()
local.airquality$Ozone[5]<-mean(local.airquality$Ozone, na.rm=TRUE)
local.airquality$Ozone[5]
#
#############################################################################
#############################Problems Solved#################################
#############################################################################
#
#
#Step 1: Load the data
#We will use the air quality data set, which you should already have as part of your R installation.
#
local.airquality<-airquality
na.numeric<-function(vector){
for(i in vector){
vector[i]<-mean(vector, na.rm=TRUE)
}
return(vector)
}
print(na.numeric(local.airquality$Ozone))
na.numeric<-function(vector){
for(i in vector){
if (is.na(i)){
vector[i]<-mean(vector, na.rm=TRUE)
}
}
return(vector)
}
#
#############################################################################
#############################Problems Solved#################################
#############################################################################
#
#
#Step 1: Load the data
#We will use the air quality data set, which you should already have as part of your R installation.
#
local.airquality<-airquality
print(na.numeric(local.airquality$Ozone))
debug(na.numeric(local.airquality$ozone))
debug(na.numeric())
na.numeric<-function(input){
for(i in input){
if (is.na(i)){
input[i]<-mean(input, na.rm=TRUE)
}
}
return(input)
}
debug(na.numeric())
na.numeric<-function(input){
for(i in 1:ncol(input)){
data[is.na(input[,i]], i] <- mean(data[,i], na.rm=TRUE)
}
return(input)
}
#
#############################################################################
#############################IMPORTS SECTION#################################
#############################################################################
#
EnsurePackage("ggplot2")
EnsuredPackage("ggmap")
EnsuredPackage("RJSONI")
EnsuredPackage("Rcurl")
#
#############################################################################
#############################Problems Solved#################################
#############################################################################
#
#
#Step 1: Load the data
#We will use the air quality data set, which you should already have as part of your R installation.
#
local.airquality<-airquality
#
#Step 2: Clean the data
#After you load the data, there will be some NAs in the data. You need to figure out what to do
#about those nasty NAs.
#
local.airquality$Ozone
print(na.numeric(local.airquality$Ozone))
na.numeric<-function(input){
for(i in 1:ncol(input)){
data[is.na(input[,i]), i] <- mean(data[,i], na.rm=TRUE)
}
return(input)
}
#
#Step 2: Clean the data
#After you load the data, there will be some NAs in the data. You need to figure out what to do
#about those nasty NAs.
#
local.airquality$Ozone
print(na.numeric(local.airquality$Ozone))
length(local.airquality$Ozone)
#output:
#update history:
#############################################################################
#####################HW7: Viz Map HW: Median Income##########################
#############################################################################
#
#############################################################################
############################LOCAL FUNCTIONS##################################
#############################################################################
#
EnsurePackage<-function(x){
x<-as.character(x)
if (!require(x,character.only=TRUE)){
install.packages(pkgs=x, repos="http://cran.r-project.org")
require(x, character.only=TRUE)
}
}
Numberize <- function(inputVector)
{
inputVector <- gsub(",", "", inputVector)
inputVector <- gsub(" ", "", inputVector)
return(as.numeric(inputVector))
}
#Packages
EnsurePackage("gdata")
EnsurePackage("ggmap")
EnsurePackage("ggplot2")
EnsurePackage("here")
EnsurePackage("RJSONIO")
EnsurePackage("mapproj")
EnsurePackage("RCurl")
#DataSets
getwd()
here::here()
EnsurePackage("here")
here::here()
install.packages("here")
EnsurePackage("here")
#DataSets
getwd()
here::here()
csv_import<-read.csv("MedianZIP-3.csv") #moved csv file to the folder R wants it in
csv_import<-read.csv("~\MedianZIP-3.csv") #moved csv file to the folder R wants it in
csv_import<-read.csv("~/MedianZIP-3.csv") #moved csv file to the folder R wants it in
csv_import<-read.csv("MedianZIP-3.csv") #moved csv file to the folder R wants it in
here::here()
csv_import<-read.csv("MedianZIP-3.csv") #moved csv file to the folder R wants it in
View(csv_import)
View(csv_import)
#windows must be placed in users Documents folder C:\Users\Users\username
#mac must be placed in Users root folder Users\username
csv_import<-read.csv("MedianZIP-3.csv" stringsAsFactors = FALSE)
#windows must be placed in users Documents folder C:\Users\Users\username
#mac must be placed in Users root folder Users\username
csv_import<-read.csv("MedianZIP-3.csv", stringsAsFactors = FALSE)
View(csv_import)
View(csv_import)
csv_import
str(zipcode)
library(zipcode)
str(zipcode)
data(zipcode)
str(zipcode)
source('~/github/IST687-Data-Science/HW7/LewisDB_HW7.R')
csv_import<-read.csv("MedianZIP-3.csv", stringsAsFactors = FALSE)
##1) Read the data using the gdata package we have previously used.
##2) Clean up the dataframe
###a. Remove any info at the front of the file that not needed
###b. Update the column names (zip, median, mean, population)
##3) Load the "zipcode" package
##4) Merge the zip code information from the two data frames (merge into one dataframe)
##5) Remove Hawaii and Alaska (just focus on the lower 48 states)
#############################################################################
#
#remove the non numbers
csv_import<-csv_import[-c(29980,29645,26201,26134,26133,26132,7056)]
#turn the col names to lowercase#
colnames(csv_import)<-tolower(colnames(csv_import))
#
#clean up the data frame#
csv_import<-data.frame(sapply(csv_import, Numberize))
#
#fix the zip column length#
#csv_import$zip<-str_pad(csv_import$zip, 5, "left","0")
csv_import$zip<-clean.zipcode(csv_import$zip)
#
#############################################################################
#############################IMPORTS SECTION#################################
#############################################################################
#Packages#
EnsurePackage("compare")
EnsurePackage("ggmap")
EnsurePackage("ggplot2")
EnsurePackage("mapproj")
EnsurePackage("sqldf")
EnsurePackage("stringr")
EnsurePackage("reprex")
EnsurePackage("zipcode")
#DataSets#
###Works on my windows 10 and mac machines by hitting the source button#
###[sets working directory to the script folder]#
this.dir <- dirname(parent.frame(2)$ofile) #Commented out to generate report, uncomment to grade
setwd(this.dir) #Commented out to generate report, uncomment to grade
csv_import<-read.csv("MedianZIP-3.csv", stringsAsFactors = FALSE)
##1) Read the data using the gdata package we have previously used.
##2) Clean up the dataframe
###a. Remove any info at the front of the file that not needed
###b. Update the column names (zip, median, mean, population)
##3) Load the "zipcode" package
##4) Merge the zip code information from the two data frames (merge into one dataframe)
##5) Remove Hawaii and Alaska (just focus on the lower 48 states)
#############################################################################
#
#remove the non numbers
csv_import<-csv_import[-c(29980,29645,26201,26134,26133,26132,7056)]
#turn the col names to lowercase#
colnames(csv_import)<-tolower(colnames(csv_import))
#
#clean up the data frame#
csv_import<-data.frame(sapply(csv_import, Numberize))
#
#fix the zip column length#
#csv_import$zip<-str_pad(csv_import$zip, 5, "left","0")
csv_import$zip<-clean.zipcode(csv_import$zip)
